From 7403b54d9cf6f78dcf25a46b9c4a53578ce8396c Mon Sep 17 00:00:00 2001
Date: Sun, 6 Mar 2022 12:53:53 -0800
Subject: [PATCH 2/4] gpio: ich: add workaround for bad velocloud use_sel

---
 drivers/gpio/gpio-ich.c | 42 +++++++++++++++++++++++++++++++++++++++--
 1 file changed, 40 insertions(+), 2 deletions(-)

diff --git a/drivers/gpio/gpio-ich.c b/drivers/gpio/gpio-ich.c
index 3b31f5e9bf40..e7d118233967 100644
--- a/drivers/gpio/gpio-ich.c
+++ b/drivers/gpio/gpio-ich.c
@@ -80,6 +80,12 @@ struct ichx_desc {
 	 * this option allows driver caching written output values
 	 */
 	bool use_outlvl_cache;
+
+	/* There are some bits in USE_SEL that are incorrectly set/not set by
+	 * the BIOS.
+	 */
+	u32 use_sel_set[3];
+	u32 use_sel_clear[3];
 };

 static struct {
@@ -134,6 +140,7 @@ static int ichx_read_bit(int reg, unsigned int nr)
 {
 	unsigned long flags;
 	u32 data;
+	u32 sel;
 	int reg_nr = nr / 32;
 	int bit = nr & 0x1f;

@@ -142,8 +149,13 @@ static int ichx_read_bit(int reg, unsigned int nr)
 	data = ICHX_READ(ichx_priv.desc->regs[reg][reg_nr],
 			 ichx_priv.gpio_base);

-	if (reg == GPIO_LVL && ichx_priv.desc->use_outlvl_cache)
-		data = ichx_priv.outlvl_cache[reg_nr] | data;
+	/* Only check outlvl_cache when the IO_SEL is set to output. */
+	if (reg == GPIO_LVL && ichx_priv.desc->use_outlvl_cache) {
+		sel = ICHX_READ(ichx_priv.desc->regs[GPIO_IO_SEL][reg_nr],
+				ichx_priv.gpio_base);
+		if (!(sel & BIT(bit)))
+			data = ichx_priv.outlvl_cache[reg_nr] | data;
+	}

 	spin_unlock_irqrestore(&ichx_priv.lock, flags);

@@ -361,6 +373,9 @@ static struct ichx_desc avoton_desc = {
 	.regs = avoton_regs,
 	.reglen = avoton_reglen,
 	.use_outlvl_cache = true,
+
+	.use_sel_set = {0x0006e030, 0x0, 0x0},
+	.use_sel_clear = {0x1800, 0x0, 0x0},
 };

 static int ichx_gpio_request_regions(struct device *dev,
@@ -388,6 +403,8 @@ static int ichx_gpio_probe(struct platform_device *pdev)
 	struct lpc_ich_info *ich_info = dev_get_platdata(dev);
 	struct resource *res_base, *res_pm;
 	int err;
+	int i, max_nr;
+	u32 use_sel, use_sel_bios;

 	if (!ich_info)
 		return -ENODEV;
@@ -433,6 +450,27 @@ static int ichx_gpio_probe(struct platform_device *pdev)
 	ichx_priv.gpio_base = res_base;
 	ichx_priv.use_gpio = ich_info->use_gpio;

+	/* Fixup USE_SEL register. */
+	max_nr = (ichx_priv.desc->ngpio + 1) / 32;
+	for (i = 0; i < max_nr; i++) {
+		use_sel = ICHX_READ(ichx_priv.desc->regs[GPIO_USE_SEL][i],
+				    ichx_priv.gpio_base);
+		use_sel_bios = use_sel;
+
+		use_sel &= ~ichx_priv.desc->use_sel_clear[i];
+		use_sel |= ichx_priv.desc->use_sel_set[i];
+
+		ICHX_WRITE(use_sel, ichx_priv.desc->regs[GPIO_USE_SEL][i],
+			   ichx_priv.gpio_base);
+
+		if (use_sel_bios != use_sel)
+			dev_warn(dev, "Bad USE_SEL[%d], was 0x%x, should be 0x%x.\n",
+				 i, use_sel_bios, use_sel);
+
+		use_sel = ICHX_READ(ichx_priv.desc->regs[GPIO_USE_SEL][i],
+				    ichx_priv.gpio_base);
+	}
+
 	/*
 	 * If necessary, determine the I/O address of ACPI/power management
 	 * registers which are needed to read the GPE0 register for GPI pins
--
2.34.1

